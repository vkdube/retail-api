import org.codehaus.groovy.runtime.DateGroovyMethods

// Gradle wrapper task
task wrapper(type: Wrapper) { gradleVersion = '2.6' }

description = 'retail-api'

def springVersion = '4.3.2.RELEASE'

allprojects  {
 
  group = 'retail'
  version = DateGroovyMethods.format(new Date(), "yyyyMMdd") + "-" + reVersion
  if (revision?.trim()) {
	  version = "${reVersion}-${revision}"
  } else {
	  version = "${reVersion}-${buildTag}"
  }
  if (!project.hasProperty('buildServer')) {
	ext.buildServer = 'local'
  }
  if (!project.hasProperty('revision')) {
	ext.revision = null
  }

   
}

configurations.all {
    exclude group: 'commons-digester', module: 'commons-digester'
    exclude group: 'commons-logging', module: 'commons-logging'
}

task calculateRevisions << {task ->
  println "Subproject -> $task.project.name"
}

subprojects {

  apply plugin: 'base'
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'groovy'
  apply plugin: 'eclipse'
  apply plugin: "jacoco"


  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
	jcenter()
    mavenLocal()
    //maven { url "http://repo.maven.apache.org/maven2" }
  }
  // Override Java compile encoding to UTF-8
  tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

  // Override eclipse default output directory from /bin to /build
  eclipse {
    classpath { defaultOutputDir = file('build') }
  }

  // Define path to the build directories
  ext.buildInstallDir = "${buildDir}${File.separator}install"
  ext.buildDistributionsDir = "${buildDir}${File.separator}distributions"

  clean{
    delete "target"
  }

  ext.reSvnRev = reVersion
 
  // Convert isSnapshot to a boolean if specified, else default it to false if not specified
  ext.isSnapshot = project.hasProperty('isSnapshot') ? Boolean.valueOf(isSnapshot) : true
  // Convert isCi to a boolean if specified, else default it to true if not specified
  ext.isCi = project.hasProperty('isCi') ? Boolean.valueOf(isCi) : false

  task calculateRevisions << {
    for (def compileDep : project.configurations.compile) {
      def compileDepStr = compileDep.name
      if (reSvnRev == null && compileDepStr.startsWith("retail-api-")) {
        reSvnRev = compileDepStr.substring(compileDepStr.lastIndexOf("-") + 1,
                compileDepStr.lastIndexOf(".jar"))
        println "Setting retail-api svn revision to: ${reSvnRev}"
      } 
    }
  }
  dependencies {
    compile group: 'org.springframework', name: 'spring-beans', version: springVersion
	compile group: 'org.springframework', name: 'spring-context', version: springVersion
	compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.7'
	compile group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.7.12'
 	//compile group: 'log4j', name: 'log4j', version:'1.2.16'
	//compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
	compile group: 'commons-lang', name: 'commons-lang', version:'2.5'
	//others
    compile(group: 'bcel', name: 'bcel', version:'5.1') {
        exclude(module: 'regexp')
    }
    // mandatory dependencies for using Spock & Swagger
	compile "com.wordnik:swagger-annotations:1.5.3-M1"
	// testing framework
    testCompile(
		 'junit:junit:4.12',
		 'org.codehaus.groovy:groovy-all:2.4.4',
		 'org.spockframework:spock-core:1.0-groovy-2.4'
	 )
	 testRuntime(
		 'com.athaydes:spock-reports:1.2.7'
     )
	// optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.1"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.1"    // allows mocking of classes without default constructor (together with CGLIB)
	runtime group: 'org.logback-extensions', name: 'logback-ext-spring', version:'0.1.1'
  }
  eclipseProject {
	  doLast {
		  // Merge in formatting configurations
		  logger.lifecycle(":${project.name}:eclipseProject:doLast - Updating formatting configurations")

		  def mergeSettingsFilesClosure = {fileName ->
			  def readFileLinesClosure = {filePath ->
				  def lines = []
				  def file = new File(filePath)
				  if (file.exists()) {
					  file.eachLine { line -> lines << line }
				  }
				  return lines
			  }

			  def projectFilePath = "${projectDir}/.settings/${fileName}";
			  def projectFileLines = readFileLinesClosure.call(projectFilePath)
			  def mergeFileLines = readFileLinesClosure.call("${rootProject.projectDir}/local/eclipse/${fileName}")

			  projectFileLines.addAll(mergeFileLines)
			  projectFileLines.unique()

			  new File(projectFilePath).withWriter { out ->
				  projectFileLines.each { out.println it }
			  }
		  }

		  mergeSettingsFilesClosure.call('org.eclipse.jdt.core.prefs')
		  mergeSettingsFilesClosure.call('org.eclipse.jdt.ui.prefs')
	  }
  }

  assemble {
		doFirst {
			// For non-local build env, determine the hilton-re module dependency included
			if (isCi && !isSnapshot) {
				logger.lifecycle(":${project.name}:assemble:doFirst - Determining hilton-re dependency version.")
				calculateRevisions.execute()
			}
		}
	}
  
   jar {
	  manifest {
		  attributes('Implementation-Title': project.name,
		  'Implementation-Version': version)
	  }
   }
	task jarJavadoc (type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	task jarSources (type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task jarTest (type: Jar, dependsOn: testClasses) {
		classifier = 'test'
		from sourceSets.test.output
	}

	configurations { testOutput.extendsFrom(testCompile) }

	artifacts {
		archives jarJavadoc
		archives jarSources
		archives jarTest
		testOutput jarTest
	}

	jacoco {
		toolVersion = '0.7.1.201405082137'
		jacocoTestReport {
			reports {
				xml.enabled false
				csv.enabled false
				html.destination "${buildDir}/reports/jacoco/html"
			}
		}
	}

}
